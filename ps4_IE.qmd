---
title: 'Psych 251 PS4: Simulation + Analysis'
author: "Irmak Ergin"
date: "2023"
format: 
  html:
    toc: true
---

This is problem set #4, in which we want you to integrate your knowledge of data wrangling with some basic simulation skills. It's a short problem set to help consolidate your `ggplot2` skills and then help you get your feet wet in testing statistical concepts through "making up data" rather than consulting a textbook or doing math. 

For ease of reading, please separate your answers from our text by marking our text with the `>` character (indicating quotes). 

# Part 1: ggplot practice

This part is a warmup, it should be relatively straightforward `ggplot2` practice.

Load data from Frank, Vul, Saxe (2011, Infancy), a study in which we measured infants' looking to hands in moving scenes. There were infants from 3 months all the way to about two years, and there were two movie conditions (`Faces_Medium`, in which kids played on a white background, and `Faces_Plus`, in which the backgrounds were more complex and the people in the videos were both kids and adults). An eye-tracker measured children's attention to faces. This version of the dataset only gives two conditions and only shows the amount of looking at hands (other variables were measured as well). 

```{r}
library(tidyverse)
library(ggplot2)
fvs <- read_csv("data/FVS2011-hands.csv")
```

First, use `ggplot` to plot a histogram of the ages of children in the study. NOTE: this is a repeated measures design, so you can't just take a histogram of every measurement. 

```{r}
head(fvs)
age_data <- unique(fvs[, c("subid", "age")])

#round the ages for x axis visualization
age_data$rounded_age <- round(age_data$age)
head(age_data)

#visualize with rounded ages indicate on the x axis
ggplot(age_data, aes(x = age)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
  labs(title = "Histogram of Ages of Children",
       x = "Age",
       y = "Frequency")+
  scale_x_continuous(breaks = age_data$rounded_age, labels = age_data$rounded_age)
```

Second, make a scatter plot showing hand looking as a function of age and condition. Add appropriate smoothing lines. Take the time to fix the axis labels and make the plot look nice.

```{r}
#age axis (x)
#round the ages for x axis visualization
age_data$rounded_age <- round(age_data$age)

ggplot(fvs, aes(x = age, y = hand.look, color = condition)) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, linetype = "solid", size = 1) +
  labs(title = "Scatter Plot of Hand Looking by Age age Condition",
       x = "Age",
       y = "Hand Looking",
       color = "Condition") +
  scale_color_manual(values = c("blue", "red")) +  
  theme_minimal() +
  scale_x_continuous(breaks = age_data$rounded_age, labels = age_data$rounded_age)

```

What do you conclude from this pattern of data?

> As age increases the hand-looking pattern between conditions differs.

What statistical analyses would you perform here to quantify these differences?

> As we have one contiunuous (age) and one categorical varible (condition), I would do a multiple linear regression analysis with age and condition as predictors.


# Part 2: Simulation

```{r, warning=F, message=F}
library(tidyverse)
```

Let's start by convincing ourselves that t-tests have the appropriate false positive rate. Run 10,000 t-tests with standard, normally-distributed data from a made up 30-person, single-measurement experiment (the command for sampling from a normal distribution is `rnorm`).

The goal of these t-tests are to determine, based on 30 observations, whether the underlying distribution (in this case a normal distribution with mean 0 and standard deviation 1) has a mean that is different from 0. In reality, the mean is not different from 0 (we sampled it using `rnorm`), but sometimes the 30 observations we get in our experiment will suggest that the mean is higher or lower. In this case, we'll get a "significant" result and incorrectly reject the null hypothesis of mean 0.

What's the proportion of "significant" results ($p < .05$) that you see?

First do this using a `for` loop.

```{r}

# Number of observations in each experiment
n <- 30

# Number of experiments
num_experiments <- 10000

# Vector to store p-values
p_values <- numeric(num_experiments)

# Run t-tests using a for loop
for (i in 1:num_experiments) {
  # Generate random data from a normal distribution with mean 0 and sd 1
  data <- rnorm(n, mean = 0, sd = 1)
  
  # Perform t-test
  t_test_result <- t.test(data)
  
  # Store p-value
  p_values[i] <- t_test_result$p.value
}

# Calculate the proportion of significant results
proportion_significant <- mean(p_values < 0.05)

# Print the result
cat("Proportion of significant results:", proportion_significant, "\n")

```

Next, do this using the `replicate` function:

```{r}
# Run t-tests using the replicate function
p_values <- replicate(num_experiments, {
  # Generate random data from a normal distribution with mean 0 and sd 1
  data <- rnorm(n)
  
  # t-test
  t_test_result <- t.test(data)
  
  t_test_result$p.value
})

# Calculate the proportion of significant results
proportion_significant <- mean(p_values < 0.05)

# Print the result
cat("Proportion of significant results:", proportion_significant, "\n")
```

How does this compare to the intended false-positive rate of $\alpha=0.05$?

> It is not significant but close

Ok, that was a bit boring. Let's try something more interesting - let's implement a p-value sniffing simulation, in the style of Simons, Nelson, & Simonsohn (2011).

Consider this scenario: you have done an experiment, again with 30 participants (one observation each, just for simplicity). The question is whether the true mean is different from 0. You aren't going to check the p-value every trial, but let's say you run 30 - then if the p-value is within the range p < .25 and p > .05, you optionally run 30 more and add those data, then test again. But if the original p value is < .05, you call it a day, and if the original is > .25, you also stop.  

First, write a function that implements this sampling regime.

```{r}
double.sample <- function() { run_experiment <- function(initial_sample_size = 30, threshold_low = 0.05, threshold_high = 0.25) {
  # Function to perform one round of the experiment
  run_single_experiment <- function(sample_size) {
    # Generate random data from a normal distribution with mean 0 and sd 1
    data <- rnorm(sample_size)
    
    # Perform t-test
    t_test_result <- t.test(data)
    
    # Return p-value
    return(t_test_result$p.value)
  }

  # Initial round of the experiment
  p_value <- run_single_experiment(initial_sample_size)
  
  # Check the initial p-value
  if (p_value < threshold_low) {
    cat("Original p-value is less than", threshold_low, "- Stop the experiment.\n")
    return(NULL)
  } else if (p_value > threshold_high) {
    cat("Original p-value is greater than", threshold_high, "- Stop the experiment.\n")
    return(NULL)
  } else {
    cat("Original p-value is between", threshold_low, "and", threshold_high, "- Optional additional rounds.\n")
  }

  # Additional rounds 
  while (p_value >= threshold_low && p_value <= threshold_high) {
    additional_data <- rnorm(initial_sample_size)
    
    # Combine with the original data
    combined_data <- c(data, additional_data)
    
    # Perform t-test on combined data
    t_test_result <- t.test(combined_data)
    
    # Update p-value
    p_value <- t_test_result$p.value
    
    # Display information about the additional round
    cat("Additional round - p-value:", p_value, "\n")
  }

  # Return the final p-value
  return(p_value)
}

# Example usage
final_p_value <- run_experiment()

}
```

Now call this function 10k times and find out what happens. 

```{r}
# Call the function 10,000 times
results <- replicate(10000, double.sample())

```

Is there an inflation of false positives? How bad is it?

> Yes, there is an overflow of false positives.

Now modify this code so that you can investigate this "double the sample" rule in a bit more depth. In the previous question, the researcher doubles the sample only when they think they got "close" to a significant result, i.e. when their not-significant p is less than 0.25. What if the researcher was more optimistic? See what happens in these 3 other scenarios:

* The researcher doubles the sample whenever their pvalue is not significant, but it's less than 0.5.
* The researcher doubles the sample whenever their pvalue is not significant, but it's less than 0.75.
* The research doubles their sample whenever they get ANY pvalue that is not significant.

How do these choices affect the false positive rate?

HINT: Try to do this by making the function `double.sample` take the upper p value as an argument, so that you can pass this through dplyr.

HINT 2: You may need more samples. Find out by looking at how the results change from run to run.

```{r}
# Define the double.sample function with an upper threshold
double.sample <- function(
  initial_sample_size = 30,
  lower_threshold = 0.05,
  upper_threshold = 0.25
) {
  # Function to perform one round of the experiment
  run_single_experiment <- function(sample_size) {
    # Generate random data from a normal distribution with mean 0 and sd 1
    data <- rnorm(sample_size)
    
    # Perform t-test
    t_test_result <- t.test(data)
    
    # Return p-value
    return(t_test_result$p.value)
  }

  # Initialize counters
  total_additional_rounds <- 0
  significant_additional_rounds <- 0

  # Initial round of the experiment
  p_value <- run_single_experiment(initial_sample_size)
  
  # Check the initial p-value
  if (p_value < lower_threshold) {
    cat("Original p-value is less than", lower_threshold, "- Stop the experiment.\n")
    return(NULL)
  } else if (p_value > upper_threshold) {
    cat("Original p-value is greater than", upper_threshold, "- Stop the experiment.\n")
    return(NULL)
  } else {
    cat("Original p-value is between", lower_threshold, "and", upper_threshold, "- Optional additional rounds.\n")
  }

  # Additional rounds (optional)
  while (p_value >= lower_threshold && p_value <= upper_threshold) {
    total_additional_rounds <- total_additional_rounds + 1
    
    additional_data <- rnorm(initial_sample_size)
    
    # Combine with the original data
    combined_data <- c(data, additional_data)
    
    # Perform t-test on combined data
    t_test_result <- t.test(combined_data)
    
    # Update p-value
    p_value <- t_test_result$p.value
    
    # Display information about the additional round
    cat("Additional round - p-value:", p_value, "\n")
    
    # Check if the additional round is significant
    if (p_value < lower_threshold) {
      significant_additional_rounds <- significant_additional_rounds + 1
    }
  }

  # Display summary information for each round
  cat("Total additional rounds:", total_additional_rounds, "\n")
  cat("Significant additional rounds (p-value <", lower_threshold, "):", significant_additional_rounds, "\n")

  # Return the final p-value
  return(total_additional_rounds)
}

# Function to run the experiment for different upper thresholds
run_experiment_for_threshold <- function(upper_threshold) {
  # Call the function 10,000 times
  results <- replicate(10000, double.sample(upper_threshold = upper_threshold))

  # Display summary statistics of the results
  summary(unlist(results))

  # Display total number of additional rounds and significant additional rounds
  cat("\nAdditional Rounds Summary (Upper Threshold =", upper_threshold, "):\n")
  cat("Total additional rounds:", sum(unlist(results) > 0.05), "\n")
  cat("Significant additional rounds (p-value < 0.05):", sum(unlist(results) < 0.05), "\n")

  # Return the results for each scenario
  return(results)
}

# Scenario 1: Double the sample whenever p-value is not significant but less than 0.5
result_scenario1 <- run_experiment_for_threshold(0.5)

# Scenario 2: Double the sample whenever p-value is not significant but less than 0.75
result_scenario2 <- run_experiment_for_threshold(0.75)

# Scenario 3: Double the sample whenever p-value is not significant (always double the sample)
result_scenario3 <- run_experiment_for_threshold(1.0)

# Display overall summary
cat("\nOverall Summary:\n")
cat("Scenario 1 - Total additional rounds:", sum(unlist(result_scenario1)), "\n")
cat("Number of p-values > 0.05:", sum(unlist(result_scenario1) > 0.05), "\n")

cat("Scenario 2 - Total additional rounds:", sum(unlist(result_scenario2)), "\n")
cat("Number of p-values > 0.05:", sum(unlist(result_scenario2) > 0.05), "\n")

cat("Scenario 3 - Total additional rounds:", sum(unlist(result_scenario3)), "\n")
cat("Number of p-values > 0.05:", sum(unlist(result_scenario3) > 0.05), "\n")

```

What do you conclude on the basis of this simulation? How bad is this kind of data-dependent policy?

> This policy seems to be largly resulting in significant p values and unlike determining n based on a power analysis without any justification
